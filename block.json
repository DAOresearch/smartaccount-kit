{
	"name": "smartaccount-kit-privy-basic",
	"type": "registry:block",
	"dependencies": [
		"@privy-io/react-auth",
		"@privy-io/server-auth",
		"@radix-ui/react-slot",
		"@radix-ui/react-toast",
		"react-icons"
	],
	"devDependencies": [],
	"registryDependencies": ["badge", "button", "card", "skeleton", "toast"],
	"files": [
		{
			"path": "./.env.local.example",
			"content": "# Privy https://dashboard.privy.io/\nPRIVY_APP_ID=\"\"\nPRIVY_APP_SECRET=\"\"\nNEXT_PUBLIC_PRIVY_APP_ID=\"${PRIVY_APP_ID}\"",
			"type": "registry:example",
			"target": "~/.env.local.example"
		},
		{
			"path": "./app/(protected)/dashboard/page.tsx",
			"content": "import { DashboardPage } from \"@/modules/web3\";\n\nexport default function Home() {\n\treturn <DashboardPage />;\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/dashboard/page.tsx"
		},
		{
			"path": "./app/(protected)/layout.tsx",
			"content": "import { OnlyAuthenticated } from \"@/modules/web3\";\nimport type { PropsWithChildren } from \"react\";\n\nexport default function ProtectedLayout({ children }: PropsWithChildren) {\n\treturn <OnlyAuthenticated redirectUrl=\"/login\">{children}</OnlyAuthenticated>;\n}\n",
			"type": "registry:example",
			"target": "./app/(protected)/layout.tsx"
		},
		{
			"path": "./app/(public)/login/page.tsx",
			"content": "import { Button } from \"@/components/ui/button\";\nimport {\n\tCard,\n\tCardHeader,\n\tCardTitle,\n\tCardDescription,\n\tCardFooter,\n} from \"@/components/ui/card\";\nimport { LoginWithGoogle } from \"@/modules/web3\";\nimport Link from \"next/link\";\n\nexport default function UnauthorizedPage() {\n\treturn (\n\t\t<div className=\"flex items-center justify-center min-h-screen\">\n\t\t\t<Card>\n\t\t\t\t<CardHeader className=\"flex items-center justify-between\">\n\t\t\t\t\t<CardTitle className=\"text-2xl font-bold\">Access Denied</CardTitle>\n\t\t\t\t\t<CardDescription>Please login to view your dashboard</CardDescription>\n\t\t\t\t</CardHeader>\n\t\t\t\t<CardFooter>\n\t\t\t\t\t<div className=\"flex space-x-2\">\n\t\t\t\t\t\t<Button asChild>\n\t\t\t\t\t\t\t<Link href=\"/\">Return to Home</Link>\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<LoginWithGoogle />\n\t\t\t\t\t</div>\n\t\t\t\t</CardFooter>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n",
			"type": "registry:example",
			"target": "./app/(public)/login/page.tsx"
		},
		{
			"path": "./app/layout.tsx",
			"content": "import type { Metadata } from \"next\";\nimport localFont from \"next/font/local\";\nimport \"./globals.css\";\nimport { Web3Provider } from \"@/modules/web3\";\n\nconst geistSans = localFont({\n\tsrc: \"./fonts/GeistVF.woff\",\n\tvariable: \"--font-geist-sans\",\n\tweight: \"100 900\",\n});\nconst geistMono = localFont({\n\tsrc: \"./fonts/GeistMonoVF.woff\",\n\tvariable: \"--font-geist-mono\",\n\tweight: \"100 900\",\n});\n\nexport const metadata: Metadata = {\n\ttitle: \"Create Next App\",\n\tdescription: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n\tchildren,\n}: Readonly<{\n\tchildren: React.ReactNode;\n}>) {\n\treturn (\n\t\t<html lang=\"en\">\n\t\t\t<body\n\t\t\t\tclassName={`${geistSans.variable} ${geistMono.variable} antialiased`}\n\t\t\t>\n\t\t\t\t<Web3Provider>{children}</Web3Provider>\n\t\t\t</body>\n\t\t</html>\n\t);\n}\n",
			"type": "registry:example",
			"target": "./app/layout.tsx"
		},
		{
			"path": "./app/page.tsx",
			"content": "import { LoginPage } from \"@/modules/web3/pages/LoginPage\";\n\nexport default function Home() {\n\treturn <LoginPage />;\n}\n",
			"type": "registry:example",
			"target": "./app/page.tsx"
		},
		{
			"path": "./components/ui/toaster.tsx",
			"content": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
			"type": "registry:ui"
		},
		{
			"path": "./hooks/use-toast.ts",
			"content": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
			"type": "registry:hook"
		},
		{
			"path": "./modules/user/components/index.ts",
			"content": "export * from \"./link-accounts-card\";\nexport * from \"./privy-account-card\";\n",
			"type": "registry:example",
			"target": "./modules/user/components/index.ts"
		},
		{
			"path": "./modules/user/components/link-accounts-card.tsx",
			"content": "\"use client\";\n\nimport { usePrivy } from \"@privy-io/react-auth\";\nimport {\n\tCard,\n\tCardContent,\n\tCardDescription,\n\tCardHeader,\n\tCardTitle,\n} from \"@/components/ui/card\";\n\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Button } from \"@/components/ui/button\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Wallet, Mail, Phone, MessageCircle } from \"lucide-react\";\nimport {\n\tFaGithub,\n\tFaXTwitter,\n\tFaDiscord,\n\tFaApple,\n\tFaGoogle,\n\tFaSpotify,\n\tFaInstagram,\n\tFaTelegram,\n} from \"react-icons/fa6\";\n\n// Types\ninterface LinkedAccount {\n\ttype: string;\n\tisLinked: boolean;\n\tvalue?: string | null;\n\ticon: React.ComponentType<{ className?: string }>;\n}\n\n// Account Item Component\ninterface LinkedAccountItemProps {\n\taccount: LinkedAccount;\n\tonLink: (accountType: string) => void;\n}\n\nconst LinkedAccountItem = ({ account, onLink }: LinkedAccountItemProps) => {\n\tconst Icon = account.icon;\n\n\treturn (\n\t\t<div className=\"flex items-center justify-between p-3 rounded-lg border\">\n\t\t\t<div className=\"flex items-center space-x-3\">\n\t\t\t\t<Icon\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\"h-5 w-5\",\n\t\t\t\t\t\taccount.isLinked ? \"text-primary\" : \"text-muted-foreground\",\n\t\t\t\t\t)}\n\t\t\t\t/>\n\t\t\t\t<div className=\"space-y-1\">\n\t\t\t\t\t<p className=\"text-sm font-medium\">{account.type}</p>\n\t\t\t\t\t{account.isLinked && account.value && (\n\t\t\t\t\t\t<p className=\"text-xs text-muted-foreground truncate max-w-[200px]\">\n\t\t\t\t\t\t\t{account.value}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Button\n\t\t\t\tvariant={account.isLinked ? \"secondary\" : \"default\"}\n\t\t\t\tsize=\"sm\"\n\t\t\t\tonClick={() => onLink(account.type.toLowerCase())}\n\t\t\t>\n\t\t\t\t{account.isLinked ? \"Linked\" : \"Link\"}\n\t\t\t</Button>\n\t\t</div>\n\t);\n};\n\nexport function LinkPrivyAccountsCard() {\n\tconst {\n\t\tuser,\n\t\tready,\n\t\tlinkEmail,\n\t\tlinkPhone,\n\t\tlinkWallet,\n\t\tlinkGoogle,\n\t\tlinkApple,\n\t\tlinkDiscord,\n\t\tlinkGithub,\n\t\tlinkTwitter,\n\t\tlinkSpotify,\n\t\tlinkInstagram,\n\t\tlinkTelegram,\n\t\tlinkFarcaster,\n\t} = usePrivy();\n\n\t// Utility function to get account statuses\n\tconst getAccountStatus = (): LinkedAccount[] => {\n\t\treturn [\n\t\t\t{\n\t\t\t\ttype: \"Email\",\n\t\t\t\tisLinked: !!user?.email,\n\t\t\t\tvalue: user?.email?.address,\n\t\t\t\ticon: Mail,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"Phone\",\n\t\t\t\tisLinked: !!user?.phone,\n\t\t\t\tvalue: user?.phone?.number,\n\t\t\t\ticon: Phone,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"Wallet\",\n\t\t\t\tisLinked: !!user?.wallet,\n\t\t\t\tvalue: user?.wallet?.address,\n\t\t\t\ticon: Wallet,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"GitHub\",\n\t\t\t\tisLinked: !!user?.github,\n\t\t\t\tvalue: user?.github?.username,\n\t\t\t\ticon: FaGithub,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"Twitter\",\n\t\t\t\tisLinked: !!user?.twitter,\n\t\t\t\tvalue: user?.twitter?.username,\n\t\t\t\ticon: FaXTwitter,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"Discord\",\n\t\t\t\tisLinked: !!user?.discord,\n\t\t\t\tvalue: user?.discord?.username,\n\t\t\t\ticon: FaDiscord,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"Apple\",\n\t\t\t\tisLinked: !!user?.apple,\n\t\t\t\tvalue: user?.apple?.email,\n\t\t\t\ticon: FaApple,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"Google\",\n\t\t\t\tisLinked: !!user?.google,\n\t\t\t\tvalue: user?.google?.email,\n\t\t\t\ticon: FaGoogle,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"Spotify\",\n\t\t\t\tisLinked: !!user?.spotify,\n\t\t\t\tvalue: user?.spotify?.email,\n\t\t\t\ticon: FaSpotify,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"Instagram\",\n\t\t\t\tisLinked: !!user?.instagram,\n\t\t\t\tvalue: user?.instagram?.username,\n\t\t\t\ticon: FaInstagram,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"Telegram\",\n\t\t\t\tisLinked: !!user?.telegram,\n\t\t\t\tvalue: user?.telegram?.username,\n\t\t\t\ticon: FaTelegram,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"Farcaster\",\n\t\t\t\tisLinked: !!user?.farcaster,\n\t\t\t\tvalue: user?.farcaster?.username,\n\t\t\t\ticon: MessageCircle,\n\t\t\t},\n\t\t];\n\t};\n\n\t// Handler for linking accounts\n\tconst handleLink = (accountType: string) => {\n\t\tconst linkingMethods = {\n\t\t\temail: linkEmail,\n\t\t\tphone: linkPhone,\n\t\t\twallet: linkWallet,\n\t\t\tgoogle: linkGoogle,\n\t\t\tapple: linkApple,\n\t\t\tdiscord: linkDiscord,\n\t\t\tgithub: linkGithub,\n\t\t\ttwitter: linkTwitter,\n\t\t\tspotify: linkSpotify,\n\t\t\tinstagram: linkInstagram,\n\t\t\ttelegram: linkTelegram,\n\t\t\tfarcaster: linkFarcaster,\n\t\t};\n\n\t\tconst linkMethod =\n\t\t\tlinkingMethods[accountType as keyof typeof linkingMethods];\n\t\tif (linkMethod) {\n\t\t\tlinkMethod();\n\t\t}\n\t};\n\n\tif (!ready) {\n\t\treturn (\n\t\t\t<Card>\n\t\t\t\t<CardHeader>\n\t\t\t\t\t<CardTitle className=\"text-xl font-semibold\">\n\t\t\t\t\t\tLinked Accounts\n\t\t\t\t\t</CardTitle>\n\t\t\t\t\t<CardDescription>\n\t\t\t\t\t\tConnect your accounts to enhance your profile\n\t\t\t\t\t</CardDescription>\n\t\t\t\t</CardHeader>\n\t\t\t\t<CardContent className=\"grid gap-4\">\n\t\t\t\t\t{/* Generate 6 skeleton items to represent loading state */}\n\t\t\t\t\t{[...Array(6)].map(() => (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tkey={Math.random() * 42069}\n\t\t\t\t\t\t\tclassName=\"flex items-center justify-between p-3 rounded-lg border\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div className=\"flex items-center space-x-3\">\n\t\t\t\t\t\t\t\t<Skeleton className=\"h-5 w-5 rounded-full\" />\n\t\t\t\t\t\t\t\t<div className=\"space-y-1\">\n\t\t\t\t\t\t\t\t\t<Skeleton className=\"h-4 w-24\" />\n\t\t\t\t\t\t\t\t\t<Skeleton className=\"h-3 w-32\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<Skeleton className=\"h-8 w-16 rounded-md\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t);\n\t}\n\n\treturn (\n\t\t<Card>\n\t\t\t<CardHeader>\n\t\t\t\t<CardTitle className=\"text-xl font-semibold\">Linked Accounts</CardTitle>\n\t\t\t\t<CardDescription>\n\t\t\t\t\tConnect your accounts to enhance your profile\n\t\t\t\t</CardDescription>\n\t\t\t</CardHeader>\n\t\t\t<CardContent className=\"grid gap-4\">\n\t\t\t\t{getAccountStatus().map((account) => (\n\t\t\t\t\t<LinkedAccountItem\n\t\t\t\t\t\tkey={account.type}\n\t\t\t\t\t\taccount={account}\n\t\t\t\t\t\tonLink={handleLink}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</CardContent>\n\t\t</Card>\n\t);\n}\n",
			"type": "registry:example",
			"target": "./modules/user/components/link-accounts-card.tsx"
		},
		{
			"path": "./modules/user/components/privy-account-card.tsx",
			"content": "\"use client\";\n\nimport { usePrivy } from \"@privy-io/react-auth\";\nimport {\n\tCard,\n\tCardContent,\n\tCardDescription,\n\tCardHeader,\n\tCardTitle,\n} from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport { Copy, User, Wallet, Mail } from \"lucide-react\";\nimport { useRouter } from \"next/navigation\";\n\nexport const PrivyAccountCard = () => {\n\tconst router = useRouter();\n\tconst { toast } = useToast();\n\tconst { user, ready, logout } = usePrivy();\n\n\tconst handleLogout = async () => {\n\t\tawait logout();\n\t\trouter.push(\"/\");\n\t};\n\n\t// Utility function for copying to clipboard\n\tconst copyToClipboard = (text: string | undefined, label: string) => {\n\t\tif (!text) return;\n\t\tnavigator.clipboard.writeText(text);\n\t\ttoast({\n\t\t\ttitle: \"Copied!\",\n\t\t\tdescription: `${label} copied to clipboard`,\n\t\t});\n\t};\n\n\tif (!ready) {\n\t\treturn (\n\t\t\t<div className=\"p-8\">\n\t\t\t\t<Card>\n\t\t\t\t\t<CardHeader>\n\t\t\t\t\t\t<CardTitle className=\"text-2xl font-bold\">Dashboard</CardTitle>\n\t\t\t\t\t\t<CardDescription>Loading your information...</CardDescription>\n\t\t\t\t\t</CardHeader>\n\t\t\t\t\t<CardContent className=\"space-y-4\">\n\t\t\t\t\t\t<Skeleton className=\"h-4 w-full\" />\n\t\t\t\t\t\t<Skeleton className=\"h-4 w-3/4\" />\n\t\t\t\t\t\t<Skeleton className=\"h-4 w-1/2\" />\n\t\t\t\t\t</CardContent>\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn (\n\t\t<Card>\n\t\t\t<CardHeader>\n\t\t\t\t<div className=\"flex items-center justify-between\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<CardTitle className=\"text-2xl font-bold\">Dashboard</CardTitle>\n\t\t\t\t\t\t<CardDescription>\n\t\t\t\t\t\t\tView and manage your account details\n\t\t\t\t\t\t</CardDescription>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"destructive\"\n\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\tclassName=\"text-sm\"\n\t\t\t\t\t\tonClick={handleLogout}\n\t\t\t\t\t>\n\t\t\t\t\t\tLog Out\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</CardHeader>\n\t\t\t<CardContent className=\"space-y-6\">\n\t\t\t\t{/* User ID Section */}\n\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t<User className=\"h-4 w-4 text-muted-foreground\" />\n\t\t\t\t\t\t<span className=\"text-sm font-medium\">User ID</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex items-center justify-between rounded-lg border p-3\">\n\t\t\t\t\t\t<code className=\"text-sm\">{user?.id}</code>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\tonClick={() => copyToClipboard(user?.id ?? \"\", \"User ID\")}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Copy className=\"h-4 w-4\" />\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t{/* Email Section */}\n\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t<Mail className=\"h-4 w-4 text-muted-foreground\" />\n\t\t\t\t\t\t<span className=\"text-sm font-medium\">Email Address</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex items-center justify-between rounded-lg border p-3\">\n\t\t\t\t\t\t<span className=\"text-sm\">\n\t\t\t\t\t\t\t{user?.email?.address || \"No email provided\"}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t{user?.email?.address && (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\tonClick={() => copyToClipboard(user?.email?.address, \"Email\")}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Copy className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t{/* Smart Account Section */}\n\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t<div className=\"flex items-center space-x-2\">\n\t\t\t\t\t\t<Wallet className=\"h-4 w-4 text-muted-foreground\" />\n\t\t\t\t\t\t<span className=\"text-sm font-medium\">Smart Account Address</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"flex items-center justify-between rounded-lg border p-3\">\n\t\t\t\t\t\t<code className=\"text-sm\">\n\t\t\t\t\t\t\t{user?.wallet?.address || \"No smart account linked\"}\n\t\t\t\t\t\t</code>\n\t\t\t\t\t\t{user?.wallet?.address && (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\t\t\tcopyToClipboard(user.wallet?.address, \"Wallet address\")\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Copy className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</CardContent>\n\t\t</Card>\n\t);\n};\n",
			"type": "registry:example",
			"target": "./modules/user/components/privy-account-card.tsx"
		},
		{
			"path": "./modules/user/index.ts",
			"content": "export * from \"./components\";\n",
			"type": "registry:example",
			"target": "./modules/user/index.ts"
		},
		{
			"path": "./modules/web3/actions/index.ts",
			"content": "// actions.ts\n\"use server\";\n\nimport { cookies } from \"next/headers\";\nimport { PrivyClient } from \"@privy-io/server-auth\";\n\nconst privy = new PrivyClient(\n\tprocess.env.NEXT_PUBLIC_PRIVY_APP_ID || \"\",\n\tprocess.env.PRIVY_APP_SECRET || \"\",\n);\n\nexport interface PrivyIdentityToken {\n\tsub: string; // User's Privy DID\n\tlinked_accounts: string; // Stringified array of linked accounts\n\tcustom_metadata: string; // Stringified custom metadata\n\tiss: string; // Should be 'privy.io'\n\taud: string; // Your Privy app ID\n\tiat: number; // Issued at timestamp\n\texp: number; // Expiration timestamp\n}\n\nexport async function checkAuthentication() {\n\t// you need to await cookies in next 15\n\tconst cookieStore = await cookies();\n\tconst identityToken = cookieStore.get(\"privy-id-token\");\n\n\tif (!identityToken?.value) {\n\t\treturn { isAuthenticated: false };\n\t}\n\n\ttry {\n\t\tconst userClaim = await privy.verifyAuthToken(identityToken.value);\n\t\tconsole.log(\"payload\", userClaim);\n\n\t\treturn {\n\t\t\tisAuthenticated: true,\n\t\t\tuserId: userClaim.userId,\n\t\t};\n\t} catch (error) {\n\t\tconsole.error(\"Identity token verification error:\", error);\n\t\treturn { isAuthenticated: false };\n\t}\n}\n",
			"type": "registry:example",
			"target": "./modules/web3/actions/index.ts"
		},
		{
			"path": "./modules/web3/components/index.ts",
			"content": "export * from \"./login-with-google\";\nexport * from \"./only-authenticated\";\nexport * from \"./provider\";\n",
			"type": "registry:example",
			"target": "./modules/web3/components/index.ts"
		},
		{
			"path": "./modules/web3/components/login-with-google.tsx",
			"content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { useLoginWithOAuth, usePrivy } from \"@privy-io/react-auth\";\nimport { useRouter } from \"next/navigation\";\n\nexport function LoginWithGoogle() {\n\tconst router = useRouter();\n\tconst { initOAuth, loading } = useLoginWithOAuth();\n\tconst { authenticated, logout, ready } = usePrivy();\n\n\tif (ready && authenticated) {\n\t\trouter.push(\"/dashboard\");\n\t}\n\n\tconst handleAuth = async () => {\n\t\ttry {\n\t\t\t// If the user is already authenticated, log them out\n\t\t\tif (authenticated) await logout();\n\t\t\t// If not already authenticated, initiate the login process\n\t\t\tawait initOAuth({ provider: \"google\" });\n\t\t} catch (err) {\n\t\t\talert((err as Error).message || err);\n\t\t}\n\t};\n\n\treturn (\n\t\t<Button type=\"button\" onClick={handleAuth} disabled={loading}>\n\t\t\t{authenticated ? \"Disconnect Google\" : \"Continue with Google\"}\n\t\t</Button>\n\t);\n}\n",
			"type": "registry:example",
			"target": "./modules/web3/components/login-with-google.tsx"
		},
		{
			"path": "./modules/web3/components/only-authenticated.tsx",
			"content": "import { redirect } from \"next/navigation\";\n\nimport type { PropsWithChildren } from \"react\";\nimport { checkAuthentication } from \"../actions\";\n\ninterface IsAuthenticatedProps extends PropsWithChildren {\n\tredirectUrl?: string;\n}\n\nexport async function OnlyAuthenticated({\n\tchildren,\n\tredirectUrl = \"/login\",\n}: IsAuthenticatedProps) {\n\ttry {\n\t\tconst { isAuthenticated } = await checkAuthentication();\n\n\t\tif (!isAuthenticated) {\n\t\t\tconsole.log(\"User not authenticated, redirecting...\");\n\t\t\tredirect(redirectUrl);\n\t\t}\n\n\t\treturn <>{children}</>;\n\t} catch (error) {\n\t\tconsole.error(\"Error in IsAuthenticated component:\", error);\n\t\tredirect(redirectUrl);\n\t}\n}\n",
			"type": "registry:example",
			"target": "./modules/web3/components/only-authenticated.tsx"
		},
		{
			"path": "./modules/web3/components/provider.tsx",
			"content": "\"use client\";\n\nimport { PrivyProvider as _PrivyProvider } from \"@privy-io/react-auth\";\n\nimport type { PropsWithChildren } from \"react\";\n\nconst appId = process.env.NEXT_PUBLIC_PRIVY_APP_ID;\n\nexport function Web3Provider({ children }: PropsWithChildren) {\n\tif (!appId) throw new Error(\"Missing NEXT_PUBLIC_PRIVY_APP_ID\");\n\n\treturn (\n\t\t<_PrivyProvider\n\t\t\tappId={appId}\n\t\t\tconfig={{\n\t\t\t\t// Customize Privy's appearance in your app\n\t\t\t\tappearance: {\n\t\t\t\t\ttheme: \"light\",\n\t\t\t\t\taccentColor: \"#676FFF\",\n\t\t\t\t\tlogo: \"https://your-logo-url\",\n\t\t\t\t},\n\t\t\t\t// Create embedded wallets for users who don't have a wallet\n\t\t\t\tembeddedWallets: {\n\t\t\t\t\tcreateOnLogin: \"all-users\",\n\t\t\t\t},\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</_PrivyProvider>\n\t);\n}\n",
			"type": "registry:example",
			"target": "./modules/web3/components/provider.tsx"
		},
		{
			"path": "./modules/web3/index.ts",
			"content": "export * from \"./components\";\nexport * from \"./pages\";\nexport * from \"./actions\";\n",
			"type": "registry:example",
			"target": "./modules/web3/index.ts"
		},
		{
			"path": "./modules/web3/pages/DashboardPage.tsx",
			"content": "import { LinkPrivyAccountsCard } from \"@/modules/user/components/link-accounts-card\";\nimport { PrivyAccountCard } from \"@/modules/user/components/privy-account-card\";\n\nexport const DashboardPage = () => {\n\treturn (\n\t\t<div className=\"p-8 space-y-8\">\n\t\t\t<PrivyAccountCard />\n\t\t\t<LinkPrivyAccountsCard />\n\t\t</div>\n\t);\n};\n",
			"type": "registry:example",
			"target": "./modules/web3/pages/DashboardPage.tsx"
		},
		{
			"path": "./modules/web3/pages/LoginPage.tsx",
			"content": "import { LoginWithGoogle } from \"../components/login-with-google\";\n\nexport const LoginPage = () => {\n\treturn (\n\t\t<div className=\"flex flex-col items-center justify-center h-screen\">\n\t\t\t<h1 className=\"text-3xl\">Privy Authentication Example</h1>\n\n\t\t\t<div className=\"flex gap-2 pt-2\">\n\t\t\t\t<LoginWithGoogle />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n",
			"type": "registry:example",
			"target": "./modules/web3/pages/LoginPage.tsx"
		},
		{
			"path": "./modules/web3/pages/index.tsx",
			"content": "export * from \"./DashboardPage\";\nexport * from \"./LoginPage\";\n",
			"type": "registry:example",
			"target": "./modules/web3/pages/index.tsx"
		}
	],
	"tailwind": {},
	"cssVars": {},
	"meta": {}
}
